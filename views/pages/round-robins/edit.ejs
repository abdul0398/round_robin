<!DOCTYPE html>
<html lang="en">
<%- include('../../partials/head', { title: 'Edit Round Robin - JJ Leads RR System' }) %>
<body>
    <div class="container">
        <%- include('../../partials/header') %>
        <%- include('../../partials/navigation', { activeSection: 'manage-rr' }) %>

        <div class="section active">
            <h2>Edit Round Robin: <%= roundRobin.name %></h2>
            
            <% if (roundRobin.is_launched) { %>
                <div class="alert alert-warning">
                    <strong>⚠️ Warning:</strong> This round robin is currently live and has distributed leads. 
                    Changes to participants or lead sources may affect the lead distribution sequence.
                </div>
            <% } %>
            
            <% if (typeof error !== 'undefined' && error) { %>
                <div class="alert alert-danger">
                    <%= error %>
                </div>
            <% } %>
            
            <form id="editRRForm" action="/round-robins/<%= roundRobin.id %>/edit" method="POST">
                <div class="form-group">
                    <label for="name">Round Robin Name</label>
                    <input type="text" id="name" name="name" value="<%= roundRobin.name %>" placeholder="e.g., Premium Condo Leads" required>
                </div>

                <div class="form-group">
                    <label for="description">Description (Optional)</label>
                    <textarea id="description" name="description" rows="3" placeholder="Brief description of this round robin"><%= roundRobin.description || '' %></textarea>
                </div>

                <h3>Edit People in Round Robin</h3>
                
                <div class="form-group">
                    <label>Select from existing participants:</label>
                    <select id="participantDropdown" onchange="addParticipantFromDropdown()">
                        <option value="">Select an existing participant...</option>
                        <!-- Options will be loaded via JavaScript -->
                    </select>
                </div>
                
                <div style="margin: 15px 0; text-align: center; color: #6c757d;">OR</div>
                
                <button type="button" class="btn-secondary" onclick="addPersonField()">+ Add New Person</button>
                
                <div id="peopleContainer">
                    <!-- Current participants will be loaded here via JavaScript -->
                </div>
                
                <br>
                
                <h3>Lead Source URLs <span style="color: red;">*</span></h3>
                <div class="form-group">
                    <label for="urlSelection">Select or Add URLs (Required)</label>
                    <div class="url-selector">
                        <select id="urlDropdown" onchange="addUrlFromDropdown()">
                            <option value="">Select from existing URLs...</option>
                            <!-- Options will be loaded from database via JavaScript -->
                        </select>
                        <div style="margin: 10px 0; text-align: center; color: #6c757d;">OR</div>
                        <div class="url-input-group">
                            <input type="url" id="newUrlInput" placeholder="Enter new URL (e.g., https://example.com)" style="flex: 1;">
                            <button type="button" class="btn-secondary" onclick="addNewUrl()" style="margin-left: 10px;">Add URL</button>
                        </div>
                    </div>
                    
                    <div class="selected-urls" id="selectedUrls">
                        <h4 style="margin: 15px 0 10px 0; color: #002655;">Selected URLs:</h4>
                        <div class="url-tags" id="urlTags">
                            <!-- Selected URLs will appear here -->
                        </div>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn-primary">Update Round Robin</button>
                    <a href="/round-robins/<%= roundRobin.id %>" class="btn-secondary">Cancel</a>
                </div>
            </form>
        </div>
    </div>

    <style>
        .alert {
            padding: 12px 15px;
            border: 1px solid transparent;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        
        .alert-warning {
            color: #856404;
            background-color: #fff3cd;
            border-color: #ffeaa7;
        }
        
        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f1b0b7;
        }
    </style>

    <script>
        // Global variables for edit form
        let selectedUrls = [];
        let availableParticipants = [];
        let masterUrls = [];
        let currentRoundRobin = <%- JSON.stringify(roundRobin) %>;

        // Initialize edit form
        document.addEventListener('DOMContentLoaded', function() {
            initializeEditForm();
        });

        function initializeEditForm() {
            // Setup form submission
            document.getElementById('editRRForm').addEventListener('submit', handleEditRRSubmit);
            
            // Initialize URL selection
            initializeUrlSelection();
            
            // Load participants and URLs
            loadParticipants();
            loadMasterUrls();
            
            // Load existing data
            loadExistingData();
        }

        function loadExistingData() {
            // Load existing participants
            if (currentRoundRobin.participants && currentRoundRobin.participants.length > 0) {
                currentRoundRobin.participants.forEach(participant => {
                    addExistingParticipantField(participant);
                });
            }
            
            // Load existing lead sources
            if (currentRoundRobin.leadSources && currentRoundRobin.leadSources.length > 0) {
                selectedUrls = currentRoundRobin.leadSources.map(source => source.url);
                updateUrlDisplay();
            }
        }

        function addExistingParticipantField(participant) {
            const container = document.getElementById('peopleContainer');
            const personDiv = document.createElement('div');
            personDiv.className = 'person-field';
            
            if (participant.participant_id && !participant.is_external) {
                // Existing participant from participants table
                personDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <h4 style="color: #002655;">${participant.name} (Existing Participant)</h4>
                        <button type="button" class="btn-danger" onclick="this.parentElement.parentElement.remove()">Remove</button>
                    </div>
                    
                    <input type="hidden" class="participant-id" value="${participant.participant_id}">
                    <input type="hidden" class="person-name" value="${participant.name}">
                    <input type="hidden" class="person-discord" value="${participant.discord_name}">
                    <input type="hidden" class="person-webhook" value="${participant.discord_webhook}">
                    
                    <div class="form-group">
                        <label>Name:</label>
                        <p style="margin: 5px 0; padding: 8px; background: #f8f9fa; border-radius: 4px;">${participant.name}</p>
                    </div>
                    <div class="form-group">
                        <label>Discord Name:</label>
                        <p style="margin: 5px 0; padding: 8px; background: #f8f9fa; border-radius: 4px;">${participant.discord_name}</p>
                    </div>
                    <div class="form-group">
                        <label>Lead Limit for this Round Robin:</label>
                        <input type="number" class="lead-limit" value="${participant.lead_limit}" min="1" required>
                    </div>
                `;
            } else {
                // External participant - check if they have a participant_id from being previously external but now in participants table
                const participantIdValue = participant.participant_id || '';
                personDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <h4 style="color: #002655;">Person ${container.children.length + 1}</h4>
                        <button type="button" class="btn-danger" onclick="this.parentElement.parentElement.remove()">Remove</button>
                    </div>
                    
                    <input type="hidden" class="participant-id" value="${participantIdValue}">
                    
                    <div class="form-group">
                        <label>Name</label>
                        <input type="text" class="person-name" value="${participant.name}" placeholder="Enter person's name" required>
                    </div>
                    <div class="form-group">
                        <label>Discord Name</label>
                        <input type="text" class="person-discord" value="${participant.discord_name || ''}" placeholder="e.g., username#1234" required>
                    </div>
                    <div class="form-group">
                        <label>Discord Webhook</label>
                        <input type="url" class="person-webhook" value="${participant.discord_webhook || ''}" placeholder="https://discord.com/api/webhooks/..." required>
                    </div>
                    <div class="form-group">
                        <label>Lead Limit for this Round Robin</label>
                        <input type="number" class="lead-limit" value="${participant.lead_limit}" placeholder="e.g., 15" min="1" required>
                    </div>
                `;
            }
            
            container.appendChild(personDiv);
        }

        // Load participants from API
        function loadParticipants() {
            fetch('/api/participants')
                .then(response => response.json())
                .then(participants => {
                    availableParticipants = participants;
                    updateParticipantDropdown();
                })
                .catch(error => {
                    console.error('Error loading participants:', error);
                });
        }

        // Load master URLs from API
        function loadMasterUrls() {
            fetch('/api/master-urls')
                .then(response => response.json())
                .then(urls => {
                    masterUrls = urls;
                    updateUrlDropdown();
                })
                .catch(error => {
                    console.error('Error loading master URLs:', error);
                    // If API fails, fall back to hardcoded URLs
                    masterUrls = [
                        { url: 'https://propertyguru.com.sg', display_name: 'PropertyGuru Singapore' },
                        { url: 'https://srx.com.sg', display_name: 'SRX Property' },
                        { url: 'https://99.co', display_name: '99.co Singapore' },
                        { url: 'https://edgeprop.sg', display_name: 'EdgeProp' },
                        { url: 'https://iproperty.com.sg', display_name: 'iProperty' }
                    ];
                    updateUrlDropdown();
                });
        }

        function updateUrlDropdown() {
            const dropdown = document.getElementById('urlDropdown');
            
            // Clear existing options (except the first one)
            while (dropdown.children.length > 1) {
                dropdown.removeChild(dropdown.lastChild);
            }

            // Add URL options from database
            masterUrls.forEach(urlData => {
                const option = document.createElement('option');
                option.value = urlData.url;
                option.textContent = urlData.display_name || urlData.url;
                dropdown.appendChild(option);
            });
        }

        function updateParticipantDropdown() {
            const dropdown = document.getElementById('participantDropdown');
            
            // Clear existing options (except the first one)
            while (dropdown.children.length > 1) {
                dropdown.removeChild(dropdown.lastChild);
            }
            
            // Add participant options
            availableParticipants.forEach(participant => {
                const option = document.createElement('option');
                option.value = participant.id;
                option.textContent = `${participant.name} (${participant.discord_name})`;
                dropdown.appendChild(option);
            });
        }

        function addParticipantFromDropdown() {
            const dropdown = document.getElementById('participantDropdown');
            const participantId = parseInt(dropdown.value);
            
            if (!participantId) return;
            
            const participant = availableParticipants.find(p => p.id === participantId);
            if (!participant) return;
            
            // Check if already added
            const container = document.getElementById('peopleContainer');
            const existingParticipants = Array.from(container.querySelectorAll('.person-field')).map(field => {
                const idInput = field.querySelector('.participant-id');
                return idInput ? parseInt(idInput.value) : null;
            }).filter(id => id !== null);
            
            if (existingParticipants.includes(participantId)) {
                alert('This participant has already been added.');
                dropdown.value = '';
                return;
            }
            
            addParticipantField(participant);
            dropdown.value = '';
        }

        function addParticipantField(participant) {
            const container = document.getElementById('peopleContainer');
            const personDiv = document.createElement('div');
            personDiv.className = 'person-field';
            
            personDiv.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h4 style="color: #002655;">${participant.name} (Existing Participant)</h4>
                    <button type="button" class="btn-danger" onclick="this.parentElement.parentElement.remove()">Remove</button>
                </div>
                
                <input type="hidden" class="participant-id" value="${participant.id}">
                <input type="hidden" class="person-name" value="${participant.name}">
                <input type="hidden" class="person-discord" value="${participant.discord_name}">
                <input type="hidden" class="person-webhook" value="${participant.discord_webhook}">
                
                <div class="form-group">
                    <label>Name:</label>
                    <p style="margin: 5px 0; padding: 8px; background: #f8f9fa; border-radius: 4px;">${participant.name}</p>
                </div>
                <div class="form-group">
                    <label>Discord Name:</label>
                    <p style="margin: 5px 0; padding: 8px; background: #f8f9fa; border-radius: 4px;">${participant.discord_name}</p>
                </div>
                <div class="form-group">
                    <label>Lead Limit for this Round Robin:</label>
                    <input type="number" class="lead-limit" placeholder="e.g., 15" min="1" value="15" required>
                </div>
            `;
            
            container.appendChild(personDiv);
        }

        // Person field management
        function addPersonField() {
            const container = document.getElementById('peopleContainer');
            const personDiv = document.createElement('div');
            personDiv.className = 'person-field';
            
            personDiv.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h4 style="color: #002655;">Person ${container.children.length + 1}</h4>
                    <button type="button" class="btn-danger" onclick="this.parentElement.parentElement.remove()">Remove</button>
                </div>
                
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" class="person-name" placeholder="Enter person's name" required>
                </div>
                <div class="form-group">
                    <label>Discord Name</label>
                    <input type="text" class="person-discord" placeholder="e.g., username#1234" required>
                </div>
                <div class="form-group">
                    <label>Discord Webhook</label>
                    <input type="url" class="person-webhook" placeholder="https://discord.com/api/webhooks/..." required>
                </div>
                <div class="form-group">
                    <label>Lead Limit for this Round Robin</label>
                    <input type="number" class="lead-limit" placeholder="e.g., 15" min="1" value="15" required>
                </div>
            `;
            
            container.appendChild(personDiv);
        }

        // Handle form submission
        function handleEditRRSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const peopleFields = document.querySelectorAll('.person-field');
            
            if (peopleFields.length === 0) {
                alert('Please add at least one person to the round robin.');
                return;
            }
            
            // Collect participants data
            const participants = [];
            peopleFields.forEach((field, index) => {
                const participantIdInput = field.querySelector('.participant-id');
                const name = field.querySelector('.person-name').value;
                const discordName = field.querySelector('.person-discord').value;
                const webhook = field.querySelector('.person-webhook').value;
                const leadLimit = field.querySelector('.lead-limit').value;
                
                if (name && discordName && webhook) {
                    const participantId = participantIdInput && participantIdInput.value ? parseInt(participantIdInput.value) : null;
                    participants.push({
                        participantId: participantId,
                        name: name,
                        discordName: discordName,
                        discordWebhook: webhook,
                        leadLimit: parseInt(leadLimit) || 15,
                        isExternal: !participantId // Only external if no valid participant ID
                    });
                }
            });
            
            if (participants.length === 0) {
                alert('Please add at least one valid participant.');
                return;
            }
            
            // Validate lead sources
            if (selectedUrls.length === 0) {
                // Highlight the URL section
                const urlSection = document.getElementById('selectedUrls').parentElement;
                urlSection.style.border = '2px solid #dc3545';
                urlSection.style.borderRadius = '8px';
                urlSection.style.padding = '10px';
                alert('Please add at least one lead source URL.');
                
                // Remove highlight after 3 seconds
                setTimeout(() => {
                    urlSection.style.border = '';
                    urlSection.style.padding = '';
                }, 3000);
                
                return;
            }
            
            // Prepare form data
            const submitData = {
                name: formData.get('name'),
                description: formData.get('description'),
                participants: participants,
                leadSources: selectedUrls
            };
            
            // Submit via fetch
            fetch(`/round-robins/${currentRoundRobin.id}/edit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(submitData)
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }
                return response.json();
            })
            .then(data => {
                if (data && data.error) {
                    alert('Error: ' + data.error);
                } else {
                    alert('✓ Round Robin updated successfully!');
                    window.location.href = `/round-robins/${currentRoundRobin.id}`;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update round robin. Please try again.');
            });
        }

        // URL Management Functions
        function initializeUrlSelection() {
            const urlDropdown = document.getElementById('urlDropdown');
            const newUrlInput = document.getElementById('newUrlInput');
            
            if (newUrlInput) {
                newUrlInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        addNewUrl();
                    }
                });
            }
        }

        function addUrlFromDropdown() {
            const dropdown = document.getElementById('urlDropdown');
            const selectedUrl = dropdown.value;
            
            if (selectedUrl && !selectedUrls.includes(selectedUrl)) {
                selectedUrls.push(selectedUrl);
                updateUrlDisplay();
                dropdown.value = '';
            }
        }

        async function addNewUrl() {
            const input = document.getElementById('newUrlInput');
            const newUrl = input.value.trim();

            if (!newUrl) {
                alert('Please enter a URL');
                return;
            }

            if (!isValidUrl(newUrl)) {
                alert('Please enter a valid URL (must start with http:// or https://)');
                return;
            }

            if (selectedUrls.includes(newUrl)) {
                alert('This URL has already been added to this round robin');
                return;
            }

            try {
                // Save URL to database
                const response = await fetch('/api/master-urls', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ url: newUrl })
                });

                const result = await response.json();

                if (response.ok) {
                    // Add to selected URLs for this round robin
                    selectedUrls.push(newUrl);
                    updateUrlDisplay();
                    input.value = '';

                    // Update the master URLs list and dropdown
                    if (!masterUrls.find(u => u.url === newUrl)) {
                        masterUrls.push(result.url);
                        updateUrlDropdown();
                    }

                    // Show success message
                    showSuccessMessage('URL saved and added to round robin!');
                } else {
                    if (result.error === 'URL already exists') {
                        // URL exists in database but not selected for this RR
                        selectedUrls.push(newUrl);
                        updateUrlDisplay();
                        input.value = '';
                        showSuccessMessage('URL added to round robin!');
                    } else {
                        alert('Error saving URL: ' + result.error);
                    }
                }
            } catch (error) {
                console.error('Error adding URL:', error);
                alert('Failed to save URL. Please try again.');
            }
        }

        function showSuccessMessage(message) {
            const successDiv = document.createElement('div');
            successDiv.style.cssText = `
                position: fixed; top: 20px; right: 20px; z-index: 9999;
                background: #28a745; color: white; padding: 10px 15px;
                border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            `;
            successDiv.textContent = message;
            document.body.appendChild(successDiv);

            setTimeout(() => {
                if (successDiv.parentNode) {
                    successDiv.parentNode.removeChild(successDiv);
                }
            }, 3000);
        }

        function isValidUrl(string) {
            try {
                new URL(string);
                return string.startsWith('http://') || string.startsWith('https://');
            } catch (_) {
                return false;
            }
        }

        function updateUrlDisplay() {
            const urlTags = document.getElementById('urlTags');
            const selectedUrlsContainer = document.getElementById('selectedUrls');
            
            if (selectedUrls.length > 0) {
                selectedUrlsContainer.classList.add('show');
                urlTags.innerHTML = selectedUrls.map((url, index) => `
                    <div class="url-tag">
                        <span>${getDomainFromUrl(url)}</span>
                        <button class="remove-url" onclick="removeUrl(${index})" title="Remove URL">×</button>
                    </div>
                `).join('');
            } else {
                selectedUrlsContainer.classList.remove('show');
            }
        }

        function removeUrl(index) {
            selectedUrls.splice(index, 1);
            updateUrlDisplay();
        }

        function getDomainFromUrl(url) {
            try {
                return new URL(url).hostname;
            } catch (_) {
                return url;
            }
        }
    </script>
</body>
</html>