<!DOCTYPE html>
<html lang="en">
<%- include('../../partials/head', { title: roundRobin.name + ' - JJ Leads RR System' }) %>
    <style>
        /* Pagination styles */
        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
            gap: 10px;
            flex-wrap: wrap;
        }

        .pagination-info {
            color: #666;
            font-size: 0.9em;
            margin-right: 20px;
        }

        .pagination-btn {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            color: #333;
            text-decoration: none;
            border-radius: 4px;
            transition: all 0.3s;
            cursor: pointer;
        }

        .pagination-btn:hover {
            background: #f8f9fa;
            border-color: #adb5bd;
        }

        .pagination-btn.active {
            background: #002655;
            color: white;
            border-color: #002655;
        }

        /* Enhanced leads table styles */
        .leads-table-container {
            overflow-x: auto;
            margin-top: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .leads-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .leads-table th {
            background: linear-gradient(135deg, #002655, #004085);
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: 600;
            border: none;
        }

        .leads-table td {
            padding: 12px;
            border-bottom: 1px solid #eee;
            vertical-align: top;
        }

        .leads-table tr:hover {
            background: #f8f9fa;
        }

        .lead-date {
            font-size: 0.9em;
            color: #666;
            min-width: 140px;
        }

        .lead-info strong {
            color: #002655;
            font-size: 1.05em;
        }

        .lead-info small {
            color: #666;
            font-size: 0.85em;
        }

        .agent-tag {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .agent-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
            font-weight: bold;
        }

        .source-tag {
            background: linear-gradient(135deg, #17a2b8, #6f42c1);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 500;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 500;
            text-transform: capitalize;
        }

        .status-badge.sent {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-badge.junk {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge.spam {
            background: #f5c6cb;
            color: #721c24;
        }

        .status-badge.failed {
            background: #f8d7da;
            color: #721c24;
        }

        .btn-small {
            padding: 4px 8px;
            font-size: 0.8em;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s;
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background: #138496;
        }

        .btn-junk {
            background: #dc3545;
            color: white;
        }

        .btn-junk:hover {
            background: #c82333;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }
        
        .btn-warning:hover {
            background: #e0a800;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        .lead-actions {
            min-width: 80px;
            text-align: center;
        }
        
        .participant-actions {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .pause-status {
            font-size: 0.8em;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 12px;
            display: inline-block;
        }
        
        .pause-status.active {
            background: #d4edda;
            color: #155724;
        }
        
        .pause-status.paused {
            background: #fff3cd;
            color: #856404;
        }

        .btn-export {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 500;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .btn-export:hover {
            background: linear-gradient(135deg, #218838, #1ea085);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .btn-export:active {
            transform: translateY(0);
        }

        .btn-export:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Empty and error states */
        .empty-leads,
        .error-leads {
            text-align: center;
            padding: 60px 20px;
            border-radius: 8px;
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .empty-leads h4,
        .error-leads h4 {
            margin-bottom: 10px;
            color: #666;
        }

        .error-leads h4 {
            color: #dc3545;
        }

        .loading-leads {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    </style>

    <body>
        <div class="container">
            <%- include('../../partials/header') %>

                <div class="section active">
                    <div
                        style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <div>
                            <h2>
                                <%= roundRobin.name %>
                                    <span class="launch-status <%= roundRobin.is_launched ? 'launched' : 'draft' %>">
                                        <%= roundRobin.is_launched ? 'LIVE' : 'DRAFT' %>
                                    </span>
                            </h2>
                            <p style="color: #6c757d; margin: 10px 0;">
                                <%= roundRobin.description || 'No description' %>
                            </p>
                        </div>
                        <div>
                            <a href="/dashboard" class="btn-secondary">‚Üê Back to Dashboard</a>
                        </div>
                    </div>

                    <% if (roundRobin.leadSources && roundRobin.leadSources.length> 0) { %>
                        <div style="margin: 15px 0;">
                            <h4 style="color: #002655; margin-bottom: 10px;">Lead Sources:</h4>
                            <div class="url-tags">
                                <% roundRobin.leadSources.forEach(source=> { %>
                                    <div class="url-tag" style="background: linear-gradient(135deg, #17a2b8, #6f42c1);">
                                        <span>
                                            <%= source.domain %>
                                        </span>
                                    </div>
                                    <% }) %>
                            </div>
                        </div>
                        <% } %>

                            <% if (roundRobin.is_launched && roundRobin.participants && roundRobin.participants.length>
                                0) { %>
                                <div class="current-next">
                                    <% const currentAgent=roundRobin.participants[(roundRobin.current_position || 0) ];
                                        const nextPosition=((roundRobin.current_position || 0) + 1) %
                                        roundRobin.participants.length; const
                                        nextAgent=roundRobin.participants[nextPosition]; %>
                                        <div class="current-agent">
                                            <h3>Current Agent</h3>
                                            <h4>
                                                <%= currentAgent.name %>
                                            </h4>
                                            <p>Leads Received: <%= currentAgent.leads_received || 0 %>
                                            </p>
                                        </div>
                                        <div class="next-agent">
                                            <h3>Next Agent</h3>
                                            <h4>
                                                <%= nextAgent.name %>
                                            </h4>
                                            <p>Leads Received: <%= nextAgent.leads_received || 0 %>
                                            </p>
                                        </div>
                                </div>
                                <% } %>

                                    <div class="dashboard-stats">
                                        <div class="stat-card">
                                            <h3>
                                                <%= roundRobin.total_leads || 0 %>
                                            </h3>
                                            <p>Total Leads</p>
                                        </div>
                                        <div class="stat-card">
                                            <h3>
                                                <%= roundRobin.participants ? roundRobin.participants.length : 0 %>
                                            </h3>
                                            <p>Total Agents</p>
                                        </div>
                                        <div class="stat-card">
                                            <h3>
                                                <%= roundRobin.is_launched ? 'Active' : 'Ready' %>
                                            </h3>
                                            <p>Status</p>
                                        </div>
                                    </div>

                                    <h3>Queue Management <%= roundRobin.is_launched
                                            ? '(‚ö†Ô∏è Live RR - Drag to Reorder with Caution)' : '(Drag to Reorder)' %>
                                    </h3>
                                    <% if (roundRobin.is_launched) { %>
                                        <div class="alert alert-warning" style="margin-bottom: 15px;">
                                            <strong>‚ö†Ô∏è Warning:</strong> This round robin is live. Reordering
                                            participants will affect the lead distribution sequence.
                                        </div>
                                        <% } %>
                                            <div class="queue-list" id="queueList-<%= roundRobin.id %>">
                                                <% if (roundRobin.participants && roundRobin.participants.length> 0) {
                                                    %>
                                                    <% roundRobin.participants.forEach((person, index)=> { %>
                                                        <div class="queue-item draggable"
                                                            data-person-id="<%= person.id %>" data-index="<%= index %>"
                                                            draggable="true">
                                                            <div class="person-info">
                                                                <div class="person-avatar">
                                                                    <%= person.name.split(' ').map(n => n[0]).join('') %></div>
                                <div class="person-details">
                                    <h4><%= person.name %></h4>
                                    <p>Discord: <%= person.discord_name || ' Not set' %>
                                                                        </p>
                                                                        <div class="lead-stats">
                                                                            <span class="stat-item">Limit: <%=
                                                                                    person.lead_limit || 15 %></span>
                                                                            <span
                                                                                class="stat-item current-leads">Current:
                                                                                <%= person.leads_received || 0 %>
                                                                            </span>
                                                                            <span
                                                                                class="stat-item available-leads">Available:
                                                                                <%= (person.lead_limit || 15) -
                                                                                    (person.leads_received || 0) %>
                                                                            </span>
                                                                        </div>
                                                                        <% if (roundRobin.is_launched) { %>
                                                                        <div class="participant-actions" style="margin-top: 10px;">
                                                                            <% if (person.is_paused) { %>
                                                                                <button class="btn-small btn-success" 
                                                                                    onclick="toggleParticipantPause(<%= roundRobin.id %>, <%= person.id %>, false, '<%= person.name %>')">
                                                                                    ‚ñ∂Ô∏è Unpause
                                                                                </button>
                                                                                <span class="pause-status paused">‚è∏Ô∏è PAUSED</span>
                                                                            <% } else { %>
                                                                                <button class="btn-small btn-warning" 
                                                                                    onclick="toggleParticipantPause(<%= roundRobin.id %>, <%= person.id %>, true, '<%= person.name %>')">
                                                                                    ‚è∏Ô∏è Pause
                                                                                </button>
                                                                                <span class="pause-status active">‚úÖ Active</span>
                                                                            <% } %>
                                                                        </div>
                                                                        <% } %>
                                                                </div>
                                                            </div>
                                                            <div class="queue-position">
                                                                Position <%= index + 1 %>
                                                                    <%- 
                                                                        // Show (Current) only for the next available participant
                                                                        (() => {
                                                                            if (!roundRobin.is_launched) return '';
                                                                            
                                                                            // Find next available participant starting from current position
                                                                            const participants = roundRobin.participants;
                                                                            const currentPos = roundRobin.current_position || 0;
                                                                            let searchPos = currentPos;
                                                                            let attempts = 0;
                                                                            
                                                                            while (attempts < participants.length) {
                                                                                const participant = participants[searchPos];
                                                                                if (participant.is_active && !participant.is_paused) {
                                                                                    // This is the next available participant
                                                                                    return searchPos === index ? ' (Next)' : '';
                                                                                }
                                                                                searchPos = (searchPos + 1) % participants.length;
                                                                                attempts++;
                                                                            }
                                                                            return '';
                                                                        })()
                                                                    %>
                                                            </div>
                                                        </div>
                                                        <% }) %>
                                                            <% } else { %>
                                                                <p
                                                                    style="text-align: center; color: #6c757d; padding: 20px;">
                                                                    No participants added yet.</p>
                                                                <% } %>
                                            </div>

                                            <div style="margin-top: 20px;">
                                                <% if (roundRobin.is_launched) { %>
                                                    <button class="btn-primary"
                                                        onclick="simulateLead(<%= roundRobin.id %>)">Simulate
                                                        Lead</button>
                                                    <button class="btn-secondary"
                                                        onclick="showWebhookInfo(<%= roundRobin.id %>)">Webhook
                                                        Info</button>
                                                    <% } else { %>
                                                        <button class="btn-primary"
                                                            onclick="launchRR(<%= roundRobin.id %>)">Launch RR</button>
                                                        <% } %>
                                                            <button class="btn-secondary"
                                                                onclick="editRR(<%= roundRobin.id %>)">Edit
                                                                Details</button>
                                                            <button class="btn-danger"
                                                                onclick="deleteRR(<%= roundRobin.id %>)">Delete
                                                                RR</button>
                                            </div>

                                            <% if (roundRobin.is_launched) { %>
                                                <div style="margin-top: 30px;">
                                                    <div
                                                        style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                                        <h3 style="color: #002655; margin: 0;">Received Leads History
                                                        </h3>
                                                        <button class="btn-export"
                                                            onclick="exportLeads(<%= roundRobin.id %>)"
                                                            title="Export all leads to CSV">
                                                            üìä Export CSV
                                                        </button>
                                                    </div>

                                                    <div id="leadsHistoryContainer">
                                                        <div class="loading-leads"
                                                            style="text-align: center; padding: 40px; color: #666;">
                                                            Loading leads history...
                                                        </div>
                                                    </div>

                                                    <div id="leadsPagination" class="pagination-container"
                                                        style="margin-top: 20px;">
                                                        <!-- Pagination will be loaded here -->
                                                    </div>
                                                </div>
                                                <% } %>
                </div>
        </div>

        <script>
            function launchRR(rrId) {
                if (confirm('Are you sure you want to launch this Round Robin? You won\'t be able to edit the queue after launching.')) {
                    fetch(`/round-robins/${rrId}/launch`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('‚úì Round Robin launched successfully!');
                                location.reload();
                            } else {
                                alert('Failed to launch round robin: ' + (data.error || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Failed to launch round robin');
                        });
                }
            }

            function simulateLead(rrId) {
                fetch(`/round-robins/${rrId}/simulate-lead`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(`‚úì Lead assigned to ${data.assignedTo}!`);
                            // Refresh leads table if it exists
                            if (typeof loadLeadsHistory === 'function') {
                                loadLeadsHistory(currentLeadsPage);
                            }
                            location.reload();
                        } else {
                            alert('Failed to simulate lead: ' + (data.error || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to simulate lead');
                    });
            }

            function editRR(rrId) {
                window.location.href = `/round-robins/${rrId}/edit`;
            }

            function showWebhookInfo(rrId) {
                fetch(`/api/webhook/info/${rrId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            alert('Error: ' + data.error);
                            return;
                        }

                        // Create a nicely formatted webhook info display
                        const webhookInfo = `
üì° WEBHOOK INFORMATION
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîó Webhook URL:
${data.webhook.url}

üîê Authentication:
Type: ${data.webhook.authentication.type}
Header: ${data.webhook.authentication.header}
Format: ${data.webhook.authentication.format}
Token: ${data.webhook.authentication.token}

üìã Required Fields:
${data.webhook.payload.required_fields.join(', ')}

üìù Example Request:
POST ${data.webhook.url}
Authorization: Bearer ${data.webhook.authentication.token}
Content-Type: application/json

${JSON.stringify(data.webhook.payload.example, null, 2)}

‚úÖ Success Response (200):
${JSON.stringify(data.webhook.responses.success.body, null, 2)}

‚ùå Error Responses:
${Object.entries(data.webhook.responses.errors).map(([code, msg]) => `${code}: ${msg}`).join('\n')}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                    `;

                        // Show in a modal-like alert (you could enhance this with a proper modal)
                        alert(webhookInfo);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to fetch webhook information');
                    });
            }

            function deleteRR(rrId) {
                if (confirm('Are you sure you want to delete this Round Robin? This action cannot be undone.')) {
                    fetch(`/round-robins/${rrId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('‚úì Round Robin deleted successfully!');
                                window.location.href = '/dashboard';
                            } else {
                                alert('Failed to delete round robin: ' + (data.error || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Failed to delete round robin');
                        });
                }
            }

            // Initialize drag and drop functionality
            document.addEventListener('DOMContentLoaded', function () {
                initializeDragAndDrop();
            });

            function initializeDragAndDrop() {
                const queueList = document.querySelector('.queue-list');
                if (!queueList) return;

                let draggedElement = null;
                let draggedIndex = null;

                // Add event listeners to all draggable items
                const items = queueList.querySelectorAll('.draggable');
                items.forEach((item, index) => {
                    item.addEventListener('dragstart', handleDragStart);
                    item.addEventListener('dragover', handleDragOver);
                    item.addEventListener('drop', handleDrop);
                    item.addEventListener('dragend', handleDragEnd);
                });

                function handleDragStart(e) {
                    draggedElement = this;
                    draggedIndex = parseInt(this.dataset.index);
                    this.style.opacity = '0.5';

                    // Set drag data
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/html', this.outerHTML);
                }

                function handleDragOver(e) {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'move';

                    // Add visual feedback
                    this.classList.add('drag-over');
                    return false;
                }

                function handleDrop(e) {
                    e.preventDefault();
                    this.classList.remove('drag-over');

                    if (draggedElement !== this) {
                        const targetIndex = parseInt(this.dataset.index);

                    // Confirm reorder if round robin is launched
                    <% if (roundRobin.is_launched) { %>
                    if (!confirm('‚ö†Ô∏è Warning: This round robin is live.\n\nReordering participants will change the lead distribution sequence.\n\nAre you sure you want to continue?')) {
                                return false;
                            }
                    <% } %>

                            // Perform the reorder
                            reorderParticipants(draggedIndex, targetIndex);
                    }

                    return false;
                }

                function handleDragEnd(e) {
                    this.style.opacity = '';

                    // Remove drag feedback from all items
                    items.forEach(item => {
                        item.classList.remove('drag-over');
                    });
                }
            }

            function reorderParticipants(fromIndex, toIndex) {
                const queueList = document.querySelector('.queue-list');
                const items = Array.from(queueList.querySelectorAll('.draggable'));

                // Create new order array
                const participantIds = items.map(item => parseInt(item.dataset.personId));

                // Move the item in the array
                const movedItem = participantIds.splice(fromIndex, 1)[0];
                participantIds.splice(toIndex, 0, movedItem);

                // Send update to server
                fetch(`/api/round-robins/<%= roundRobin.id %>/reorder-participants`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        participantIds: participantIds
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Reload the page to show updated order
                            location.reload();
                        } else {
                            alert('Failed to reorder participants: ' + (data.error || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to reorder participants');
                    });
            }

            // Helper function for status display
            function getStatusDisplay(status) {
                const statusMap = {
                    'sent': 'Sent to Discord',
                    'junk': 'Marked as Junk',
                    'spam': 'Marked as Spam',
                    'pending': 'Pending'
                };
                return statusMap[status] || status;
            }

            // Leads history functionality
            let currentLeadsPage = 1;

            // Load leads history on page load (only for launched RRs)
            <% if (roundRobin.is_launched) { %>
                document.addEventListener('DOMContentLoaded', function () {
                    loadLeadsHistory(1);
                });
            <% } %>

                async function loadLeadsHistory(page = 1) {
                    try {
                        showLeadsLoading();

                        const response = await fetch(`/api/round-robins/<%= roundRobin.id %>/leads?page=${page}&limit=10`);
                        const data = await response.json();

                        if (response.ok) {
                            displayLeads(data.leads);
                            updateLeadsPagination(data.page, data.pages, data.total);
                            currentLeadsPage = data.page;
                        } else {
                            showLeadsError(data.error || 'Failed to load leads');
                        }
                    } catch (error) {
                        console.error('Load leads error:', error);
                        showLeadsError('Failed to load leads');
                    }
                }

            function showLeadsLoading() {
                document.getElementById('leadsHistoryContainer').innerHTML = `
                    <div class="loading-leads" style="text-align: center; padding: 40px; color: #666;">
                        Loading leads history...
                    </div>
                `;
            }

            function displayLeads(leads) {
                const container = document.getElementById('leadsHistoryContainer');

                if (leads.length === 0) {
                    container.innerHTML = `
                        <div class="empty-leads" style="text-align: center; padding: 40px; color: #999;">
                            <h4>No leads received yet</h4>
                            <p>Leads will appear here once they start coming in.</p>
                        </div>
                    `;
                    return;
                }

                let tableHTML = `
                    <div class="leads-table-container">
                        <table class="leads-table">
                            <thead>
                                <tr>
                                    <th>Date/Time</th>
                                    <th>Lead Info</th>
                                    <th>Assigned To</th>
                                    <th>Source</th>
                                    <th>Status</th>
                                    <th>Additional Data</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

                leads.forEach(lead => {
                    const date = new Date(lead.received_at);
                    const formattedDate = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();

                    tableHTML += `
                        <tr class="lead-row">
                            <td class="lead-date">${formattedDate}</td>
                            <td class="lead-info">
                                <strong>${escapeHtml(lead.name || 'Unknown')}</strong><br>
                                <small>${escapeHtml((lead.phone || '') + ' | ' + (lead.email || ''))}</small>
                            </td>
                            <td class="lead-agent">
                                <div class="agent-tag">
                                    <span class="agent-avatar">${getInitials(lead.participant_name)}</span>
                                    ${escapeHtml(lead.participant_name)}
                                </div>
                            </td>
                            <td class="lead-source">
                                <span class="source-tag">${escapeHtml(lead.source_domain || 'Unknown')}</span>
                            </td>
                            <td class="lead-status">
                                <span class="status-badge ${lead.status}" ${getStatusTitle(lead)}>
                                    ${getStatusDisplay(lead.status)}
                                </span>
                            </td>
                            <td class="lead-additional">
                                ${lead.additional_fields_count > 0 ?
                            `<button class="btn-small btn-info" onclick="showAdditionalData(${lead.id}, '${escapeHtml(lead.name)}')">
                                        ${lead.additional_fields_count} fields
                                    </button>` :
                            '<span style="color: #999;">None</span>'
                        }
                            </td>
                            <td class="lead-actions">
                                ${lead.status !== 'junk' ?
                            `<button class="btn-small btn-junk" onclick="markAsJunk(${lead.id}, '${escapeHtml(lead.name)}')">
                                        Mark Junk
                                    </button>` :
                            '<span style="color: #dc3545; font-size: 0.8em;">Already Junk</span>'
                        }
                            </td>
                        </tr>
                    `;
                });

                tableHTML += `
                            </tbody>
                        </table>
                    </div>
                `;

                container.innerHTML = tableHTML;
            }

            function updateLeadsPagination(page, pages, total) {
                const container = document.getElementById('leadsPagination');

                if (pages <= 1) {
                    container.innerHTML = '';
                    return;
                }

                let paginationHTML = `
                    <div class="pagination-info">
                        Showing page ${page} of ${pages} (${total} total leads)
                    </div>
                `;

                // Previous button
                if (page > 1) {
                    paginationHTML += `<a href="javascript:void(0)" class="pagination-btn" onclick="loadLeadsHistory(${page - 1})">¬´ Previous</a>`;
                }

                // Page numbers
                for (let i = Math.max(1, page - 2); i <= Math.min(pages, page + 2); i++) {
                    const isActive = i === page ? 'active' : '';
                    paginationHTML += `<a href="javascript:void(0)" class="pagination-btn ${isActive}" onclick="loadLeadsHistory(${i})">${i}</a>`;
                }

                // Next button
                if (page < pages) {
                    paginationHTML += `<a href="javascript:void(0)" class="pagination-btn" onclick="loadLeadsHistory(${page + 1})">Next ¬ª</a>`;
                }

                container.innerHTML = paginationHTML;
            }

            function showLeadsError(message) {
                document.getElementById('leadsHistoryContainer').innerHTML = `
                    <div class="error-leads" style="text-align: center; padding: 40px; color: #dc3545;">
                        <h4>Error Loading Leads</h4>
                        <p>${escapeHtml(message)}</p>
                        <button class="btn-primary" onclick="loadLeadsHistory(currentLeadsPage)">Retry</button>
                    </div>
                `;
            }

            async function showAdditionalData(leadId, leadName) {
                try {
                    const response = await fetch(`/api/round-robins/<%= roundRobin.id %>/leads`);
                    const data = await response.json();

                    if (response.ok) {
                        const lead = data.leads.find(l => l.id === leadId);
                        if (lead && lead.additional_data && lead.additional_data.length > 0) {
                            let additionalInfo = `Additional Data for ${leadName}:\\n\\n`;
                            lead.additional_data.forEach(field => {
                                additionalInfo += `${field.field_key}: ${field.field_value}\\n`;
                            });
                            alert(additionalInfo);
                        } else {
                            alert('No additional data found for this lead.');
                        }
                    } else {
                        alert('Failed to load additional data: ' + (data.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Failed to load additional data');
                }
            }

            function getInitials(name) {
                return name ? name.split(' ').map(n => n[0]).join('').toUpperCase() : '?';
            }

            function getStatusTitle(lead) {
                if ((lead.status === 'junk' || lead.status === 'spam') && lead.status_reason) {
                    return `title="Reason: ${escapeHtml(lead.status_reason)}"`;
                }
                return '';
            }

            function escapeHtml(text) {
                if (!text) return '';
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            // Export leads functionality
            async function exportLeads(roundRobinId) {
                try {
                    // Disable the button and show loading state
                    const exportBtn = document.querySelector('.btn-export');
                    const originalText = exportBtn.innerHTML;
                    exportBtn.disabled = true;
                    exportBtn.innerHTML = '‚è≥ Exporting...';

                    // Create a temporary link to trigger download
                    const link = document.createElement('a');
                    link.href = `/api/round-robins/${roundRobinId}/leads/export`;
                    link.download = ''; // Let the server determine the filename

                    // Append to body, click, and remove
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    // Show success message
                    showExportSuccess();

                    // Re-enable button after a delay
                    setTimeout(() => {
                        exportBtn.disabled = false;
                        exportBtn.innerHTML = originalText;
                    }, 2000);

                } catch (error) {
                    console.error('Export error:', error);
                    showExportError('Failed to export leads. Please try again.');

                    // Re-enable button
                    const exportBtn = document.querySelector('.btn-export');
                    exportBtn.disabled = false;
                    exportBtn.innerHTML = 'üìä Export CSV';
                }
            }

            function showExportSuccess() {
                const successDiv = document.createElement('div');
                successDiv.style.cssText = `
                    position: fixed; top: 20px; right: 20px; z-index: 9999;
                    background: #28a745; color: white; padding: 12px 20px;
                    border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    font-weight: 500;
                `;
                successDiv.innerHTML = '‚úÖ Leads exported successfully!';
                document.body.appendChild(successDiv);

                setTimeout(() => {
                    if (successDiv.parentNode) {
                        successDiv.style.transform = 'translateX(400px)';
                        setTimeout(() => {
                            if (successDiv.parentNode) {
                                successDiv.parentNode.removeChild(successDiv);
                            }
                        }, 300);
                    }
                }, 3000);
            }

            function showExportError(message) {
                const errorDiv = document.createElement('div');
                errorDiv.style.cssText = `
                    position: fixed; top: 20px; right: 20px; z-index: 9999;
                    background: #dc3545; color: white; padding: 12px 20px;
                    border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    font-weight: 500;
                `;
                errorDiv.innerHTML = `‚ùå ${message}`;
                document.body.appendChild(errorDiv);

                setTimeout(() => {
                    if (errorDiv.parentNode) {
                        errorDiv.style.transform = 'translateX(400px)';
                        setTimeout(() => {
                            if (errorDiv.parentNode) {
                                errorDiv.parentNode.removeChild(errorDiv);
                            }
                        }, 300);
                    }
                }, 5000);
            }

            // Mark lead as junk functionality
            async function markAsJunk(leadId, leadName) {
                if (!confirm(`Are you sure you want to mark "${leadName}" as junk?\n\nThis will:\n‚Ä¢ Mark the lead as junk\n‚Ä¢ Add the email and phone to junk list\n‚Ä¢ Prevent future leads from this email/phone from being sent to Discord`)) {
                    return;
                }

                const reason = prompt('Reason for marking as junk (optional):', 'Marked as junk by admin');
                if (reason === null) {
                    return; // User cancelled
                }

                try {
                    const response = await fetch(`/api/leads/${leadId}/mark-junk`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ reason: reason || 'Marked as junk by admin' })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        let message = `‚úÖ Lead marked as junk successfully!`;
                        if (data.junkRulesCreated && data.junkRulesCreated.length > 0) {
                            message += `\n\nJunk rules created for:\n${data.junkRulesCreated.join('\n')}`;
                        }
                        alert(message);

                        // Refresh the leads table
                        loadLeadsHistory(currentLeadsPage);
                    } else {
                        alert('Failed to mark lead as junk: ' + (data.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Mark as junk error:', error);
                    alert('Failed to mark lead as junk. Please try again.');
                }
            }

            // Toggle participant pause/unpause functionality
            async function toggleParticipantPause(roundRobinId, participantId, isPaused, participantName) {
                const action = isPaused ? 'pause' : 'unpause';
                const reason = prompt(`Reason for ${action}ing "${participantName}" (optional):`, `${action === 'pause' ? 'Temporarily paused' : 'Unpaused'} by admin`);
                
                if (reason === null) {
                    return; // User cancelled
                }
                
                try {
                    const response = await fetch(`/api/round-robins/${roundRobinId}/participants/${participantId}/toggle-pause`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ 
                            isPaused: isPaused, 
                            reason: reason || `${action === 'pause' ? 'Temporarily paused' : 'Unpaused'} by admin`
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        alert(`‚úÖ ${data.message}`);
                        // Reload the page to show updated status
                        location.reload();
                    } else {
                        alert('Failed to update participant status: ' + (data.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Toggle pause error:', error);
                    alert('Failed to update participant status. Please try again.');
                }
            }
        </script>
    </body>

</html>