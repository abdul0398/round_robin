<!DOCTYPE html>
<html lang="en">
<%- include('../../partials/head', { title: 'Participants - JJ Leads RR System' }) %>
<body>
    <div class="container">
        <%- include('../../partials/header') %>
        <%- include('../../partials/navigation', { activeSection: 'participants' }) %>

        <div class="section active">
            <div class="section-header">
                <h2>Participants Management</h2>
                <button class="btn-primary" onclick="showAddParticipantModal()">+ Add New Participant</button>
            </div>
            
            <div class="participants-container" id="participantsContainer">
                <!-- Participants will be loaded here -->
            </div>
            
            <div class="pagination-container" id="paginationContainer">
                <!-- Pagination will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Add/Edit Participant Modal -->
    <div id="participantModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Add New Participant</h3>
                <span class="close" onclick="closeParticipantModal()">&times;</span>
            </div>
            <form id="participantForm">
                <input type="hidden" id="participantId">
                
                <div class="form-group">
                    <label for="participantName">Name <span class="required">*</span></label>
                    <input type="text" id="participantName" name="name" placeholder="Enter participant name" required>
                    <small class="form-help">This name must be unique among all participants</small>
                </div>

                <div class="form-group">
                    <label for="discordName">Discord Name <span class="required">*</span></label>
                    <input type="text" id="discordName" name="discordName" placeholder="e.g., username#1234" required>
                </div>

                <div class="form-group">
                    <label for="discordWebhook">Discord Webhook URL <span class="required">*</span></label>
                    <input type="url" id="discordWebhook" name="discordWebhook" placeholder="https://discord.com/api/webhooks/..." required>
                    <small class="form-help">Get this from your Discord server's channel settings</small>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn-primary" id="submitBtn">Create Participant</button>
                    <button type="button" class="btn-secondary" onclick="closeParticipantModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Deletion</h3>
                <span class="close" onclick="closeDeleteModal()">&times;</span>
            </div>
            <p>Are you sure you want to delete <strong id="deleteParticipantName"></strong>?</p>
            <p style="color: #dc3545; font-size: 0.9em;">This action cannot be undone.</p>
            
            <div class="form-actions">
                <button type="button" class="btn-danger" id="confirmDeleteBtn">Delete Participant</button>
                <button type="button" class="btn-secondary" onclick="closeDeleteModal()">Cancel</button>
            </div>
        </div>
    </div>

    <style>
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .participants-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .participant-card {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .participant-card:last-child {
            border-bottom: none;
        }
        
        .participant-info h4 {
            margin: 0 0 5px 0;
            color: #002655;
            font-size: 1.1em;
        }
        
        .participant-meta {
            color: #666;
            font-size: 0.9em;
        }
        
        .participant-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 0.85em;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s;
        }
        
        .btn-edit {
            background: #007bff;
            color: white;
        }
        
        .btn-edit:hover {
            background: #0056b3;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
        }
        
        .btn-delete:hover {
            background: #c82333;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 0;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #002655;
        }
        
        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: #000;
        }
        
        .modal form {
            padding: 20px;
        }
        
        .form-help {
            display: block;
            margin-top: 5px;
            color: #666;
            font-size: 0.85em;
        }
        
        .required {
            color: #dc3545;
        }
        
        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
            gap: 10px;
        }
        
        .pagination-info {
            color: #666;
            font-size: 0.9em;
            margin-right: 20px;
        }
        
        .pagination-btn {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            color: #333;
            text-decoration: none;
            border-radius: 4px;
            transition: all 0.3s;
        }
        
        .pagination-btn:hover {
            background: #f8f9fa;
            border-color: #adb5bd;
        }
        
        .pagination-btn.active {
            background: #002655;
            color: white;
            border-color: #002655;
        }
        
        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        
        .empty-state h3 {
            margin-bottom: 10px;
            color: #999;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .success-message {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            padding: 12px 20px;
            border-radius: 4px;
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        
        .success-message.show {
            transform: translateX(0);
        }
        
        .error-message {
            background: #dc3545 !important;
        }
    </style>

    <script>
        let currentPage = 1;
        let totalPages = 1;
        let currentEditingId = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadParticipants();
        });

        // Load participants with pagination
        async function loadParticipants(page = 1) {
            try {
                showLoading();
                
                const response = await fetch(`/api/participants/all?page=${page}&limit=20`);
                const data = await response.json();
                
                if (response.ok) {
                    displayParticipants(data.participants);
                    updatePagination(data.page, data.pages, data.total);
                    currentPage = data.page;
                    totalPages = data.pages;
                } else {
                    showError(data.error || 'Failed to load participants');
                }
            } catch (error) {
                console.error('Load participants error:', error);
                showError('Failed to load participants');
            }
        }

        // Display participants
        function displayParticipants(participants) {
            const container = document.getElementById('participantsContainer');
            
            if (participants.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>No Participants Yet</h3>
                        <p>Add your first participant to get started with round robin lead distribution.</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = participants.map(participant => `
                <div class="participant-card">
                    <div class="participant-info">
                        <h4>${escapeHtml(participant.name)}</h4>
                        <div class="participant-meta">
                            Discord: ${escapeHtml(participant.discord_name)}<br>
                            Created: ${new Date(participant.created_at).toLocaleDateString()}
                        </div>
                    </div>
                    <div class="participant-actions">
                        <button class="btn-small btn-edit" onclick="editParticipant(${participant.id})">Edit</button>
                        <button class="btn-small btn-delete" onclick="deleteParticipant(${participant.id}, '${escapeHtml(participant.name)}')">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        // Show loading state
        function showLoading() {
            document.getElementById('participantsContainer').innerHTML = `
                <div class="loading">
                    <p>Loading participants...</p>
                </div>
            `;
        }

        // Update pagination
        function updatePagination(page, pages, total) {
            const container = document.getElementById('paginationContainer');
            
            if (pages <= 1) {
                container.innerHTML = '';
                return;
            }
            
            let paginationHTML = `
                <div class="pagination-info">
                    Showing page ${page} of ${pages} (${total} total participants)
                </div>
            `;
            
            // Previous button
            if (page > 1) {
                paginationHTML += `<a href="javascript:void(0)" class="pagination-btn" onclick="loadParticipants(${page - 1})">« Previous</a>`;
            }
            
            // Page numbers
            for (let i = Math.max(1, page - 2); i <= Math.min(pages, page + 2); i++) {
                const isActive = i === page ? 'active' : '';
                paginationHTML += `<a href="javascript:void(0)" class="pagination-btn ${isActive}" onclick="loadParticipants(${i})">${i}</a>`;
            }
            
            // Next button
            if (page < pages) {
                paginationHTML += `<a href="javascript:void(0)" class="pagination-btn" onclick="loadParticipants(${page + 1})">Next »</a>`;
            }
            
            container.innerHTML = paginationHTML;
        }

        // Modal functions
        function showAddParticipantModal() {
            currentEditingId = null;
            document.getElementById('modalTitle').textContent = 'Add New Participant';
            document.getElementById('submitBtn').textContent = 'Create Participant';
            document.getElementById('participantForm').reset();
            document.getElementById('participantId').value = '';
            document.getElementById('participantModal').style.display = 'block';
        }

        function closeParticipantModal() {
            document.getElementById('participantModal').style.display = 'none';
            currentEditingId = null;
        }

        async function editParticipant(id) {
            try {
                // Load participant data (we'll use the current data from the display)
                const participantCards = document.querySelectorAll('.participant-card');
                const participantCard = Array.from(participantCards).find(card => 
                    card.querySelector('.btn-edit').onclick.toString().includes(id)
                );
                
                if (!participantCard) {
                    showError('Participant not found');
                    return;
                }
                
                const name = participantCard.querySelector('h4').textContent;
                const discordName = participantCard.querySelector('.participant-meta').textContent.split('Discord: ')[1].split('\n')[0];
                
                // We need to fetch the full participant data to get the webhook
                const response = await fetch(`/api/participants`);
                const participants = await response.json();
                const participant = participants.find(p => p.id === id);
                
                if (!participant) {
                    showError('Participant not found');
                    return;
                }
                
                currentEditingId = id;
                document.getElementById('modalTitle').textContent = 'Edit Participant';
                document.getElementById('submitBtn').textContent = 'Update Participant';
                document.getElementById('participantId').value = id;
                document.getElementById('participantName').value = participant.name;
                document.getElementById('discordName').value = participant.discord_name;
                document.getElementById('discordWebhook').value = participant.discord_webhook;
                document.getElementById('participantModal').style.display = 'block';
                
            } catch (error) {
                console.error('Edit participant error:', error);
                showError('Failed to load participant data');
            }
        }

        function deleteParticipant(id, name) {
            currentEditingId = id;
            document.getElementById('deleteParticipantName').textContent = name;
            document.getElementById('deleteModal').style.display = 'block';
            
            document.getElementById('confirmDeleteBtn').onclick = async function() {
                try {
                    const response = await fetch(`/api/participants/${id}`, {
                        method: 'DELETE'
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        showSuccess(data.message || 'Participant deleted successfully');
                        closeDeleteModal();
                        loadParticipants(currentPage);
                    } else {
                        showError(data.error || 'Failed to delete participant');
                    }
                } catch (error) {
                    console.error('Delete participant error:', error);
                    showError('Failed to delete participant');
                }
            };
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            currentEditingId = null;
        }

        // Form submission
        document.getElementById('participantForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const participantData = {
                name: formData.get('name').trim(),
                discordName: formData.get('discordName').trim(),
                discordWebhook: formData.get('discordWebhook').trim()
            };
            
            try {
                const isEdit = currentEditingId !== null;
                const url = isEdit ? `/api/participants/${currentEditingId}` : '/api/participants';
                const method = isEdit ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(participantData)
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccess(data.message || `Participant ${isEdit ? 'updated' : 'created'} successfully`);
                    closeParticipantModal();
                    loadParticipants(currentPage);
                } else {
                    showError(data.error || `Failed to ${isEdit ? 'update' : 'create'} participant`);
                }
            } catch (error) {
                console.error('Form submission error:', error);
                showError(`Failed to ${currentEditingId ? 'update' : 'create'} participant`);
            }
        });

        // Utility functions
        function showSuccess(message) {
            showMessage(message, 'success');
        }

        function showError(message) {
            showMessage(message, 'error');
        }

        function showMessage(message, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `success-message ${type === 'error' ? 'error-message' : ''}`;
            messageDiv.textContent = message;
            document.body.appendChild(messageDiv);
            
            setTimeout(() => messageDiv.classList.add('show'), 100);
            
            setTimeout(() => {
                messageDiv.classList.remove('show');
                setTimeout(() => {
                    if (messageDiv.parentNode) {
                        messageDiv.parentNode.removeChild(messageDiv);
                    }
                }, 300);
            }, 3000);
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            const participantModal = document.getElementById('participantModal');
            const deleteModal = document.getElementById('deleteModal');
            
            if (event.target === participantModal) {
                closeParticipantModal();
            }
            if (event.target === deleteModal) {
                closeDeleteModal();
            }
        };
    </script>
</body>
</html>